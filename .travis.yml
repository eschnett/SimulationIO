# General settings
notifications:
  email: false
sudo: false
dist: trusty

# Build matrix
os:
  #TODO - linux
  - osx
language: cpp
compiler:
  - clang
  - gcc
env:
  global:
    - ENABLE_ASDF_CXX=ON
    - ENABLE_HDF5=ON
  matrix:
    - DEFAULT=ON                # dummy setting
    - ENABLE_ASDF_CXX=OFF
    - ENABLE_HDF5=OFF
matrix:
  exclude:
    - os: osx
      compiler: gcc
    - os: osx
      env: ENABLE_ASDF_CXX=OFF
    - os: osx
      env: ENABLE_HDF5=OFF
    - compiler: gcc
      env: ENABLE_ASDF_CXX=OFF
    - compiler: gcc
      env: ENABLE_HDF5=OFF

# Install, build, and test
addons:
  apt:
    packages:
      - lcov
      - libopenmpi-dev
      - openmpi-bin
      - python-numpy
      - swig

cache:
  directories:
    - $HOME/hdf5-1.10.1
    - $HOME/yaml-cpp-0.6.2
    - $HOME/asdf-cxx-6.3.0

install:
  - which $CXX
  - $CXX --version
  - |
    if [ "$TRAVIS_OS_NAME" = linux ]; then
      # Build HDF5
      export HDF5_DIR="$HOME/hdf5-1.10.1"
      export PATH="$HDF5_DIR/bin:$PATH"
      if [ ! -e "$HDF5_DIR/bin/h5ls" ]; then
        (
          mkdir -p external
          cd external
          wget https://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.bz2
          tar xjf hdf5-1.10.1.tar.bz2
          mkdir hdf5-1.10.1-build
          cd hdf5-1.10.1-build
          `pwd`/../hdf5-1.10.1/configure --prefix="$HDF5_DIR" --enable-cxx
          make -j2
          make -j2 install
        )
      fi
      # Build yaml-cpp
      export YAML_CPP_DIR="$HOME/yaml-cpp-0.6.2"
      export LD_LIBRARY_PATH="$YAML_CPP_DIR/lib:$LD_LIBRARY_PATH"
      if [ ! -e "$YAML_CPP_DIR/include/yaml-cpp/yaml.h" ]; then
        (
          mkdir -p external
          cd external
          wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.2.tar.gz
          tar xzf yaml-cpp-0.6.2.tar.gz
          mkdir yaml-cpp-0.6.2-build
          cd yaml-cpp-0.6.2-build
          # -DBUILD_SHARED_LIBS=ON
          cmake -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_INSTALL_PREFIX="$YAML_CPP_DIR" ../yaml-cpp-yaml-cpp-0.6.2
          make -j2
          make -j2 install
        )
      fi
      # Build asdf-cxx
      export ASDF_CXX_DIR="$HOME/asdf-cxx-6.3.0"
      export PATH="$ASDF_CXX_DIR/bin:$PATH"
      # Check cache
      if [ ! -e "$ASDF_CXX_DIR/bin/asdf-ls" ]; then
        (
          mkdir -p external
          cd external
          wget https://github.com/eschnett/asdf-cxx/archive/version/6.3.0.tar.gz
          tar xzf 6.3.0.tar.gz
          mkdir asdf-cxx-6.3.0-build
          cd asdf-cxx-6.3.0-build
          cmake -DCMAKE_PREFIX_PATH="$YAML_CPP_DIR" -DCMAKE_INSTALL_PREFIX="$ASDF_CXX_DIR" ../asdf-cxx-version-6.3.0
          make -j2
          make -j2 install
        )
      fi
      # Handle Python
      export PYTHON_DIR="/usr"
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = osx ]; then
      # Handle HDF5
      brew update
      brew install --overwrite --dry-run gcc
      brew install --overwrite gcc
      brew install hdf5
      brew install lcov
      brew install open-mpi
      brew install swig
      export HDF5_DIR="/usr/local"
      # Build yaml-cpp
      export YAML_CPP_DIR="$HOME/yaml-cpp-0.6.2"
      # export DYLD_LIBRARY_PATH="$YAML_CPP_DIR/lib:$DYLD_LIBRARY_PATH"
      # Check cache
      if [ ! -e "$YAML_CPP_DIR/include/yaml-cpp/yaml.h" ]; then
        (
          mkdir -p external
          cd external
          wget https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.2.tar.gz
          tar xzf yaml-cpp-0.6.2.tar.gz
          mkdir yaml-cpp-0.6.2-build
          cd yaml-cpp-0.6.2-build
          # -DBUILD_SHARED_LIBS=ON
          cmake -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MACOSX_RPATH=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="$YAML_CPP_DIR" ../yaml-cpp-yaml-cpp-0.6.2
          make -j2
          make -j2 install
          
        )
      fi
      # Build asdf-cxx
      export ASDF_CXX_DIR="$HOME/asdf-cxx-6.3.0"
      export PATH="$ASDF_CXX_DIR/bin:$PATH"
      # Check cache
      if [ ! -e "$ASDF_CXX_DIR/bin/asdf-ls" ]; then
        (
          mkdir -p external
          cd external
          wget https://github.com/eschnett/asdf-cxx/archive/version/6.3.0.tar.gz
          tar xzf 6.3.0.tar.gz
          mkdir asdf-cxx-6.3.0-build
          cd asdf-cxx-6.3.0-build
          cmake -DCMAKE_PREFIX_PATH="$YAML_CPP_DIR" -DCMAKE_MACOSX_RPATH=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="$ASDF_CXX_DIR" ../asdf-cxx-version-6.3.0
          make -j2
          make -j2 install
        )
      fi
      # Handle Python
      export PYTHON_DIR="/usr/local/Cellar/python/2.7.14/Frameworks/Python.framework/Versions/2.7"
      export PATH="/usr/local/Cellar/python/2.7.14/bin:$PATH"
    fi
  - hash -r
  - which mpirun
  - mpirun --version
  - which h5ls
  - h5ls --version
  - which asdf-ls
  - asdf-ls
  - which python
  - python --version
  - which pip
  - pip --version
  - pip install --user h5py
  - pip install --user codecov
  - gem install coveralls-lcov
  - which lcov
  - lcov --version

script:
  - mkdir build && pushd build
  - cmake -DENABLE_ASDF_CXX=${ENABLE_ASDF_CXX} -DENABLE_HDF5=${ENABLE_HDF5} -DCMAKE_PREFIX_PATH="$HDF5_DIR;$YAML_CPP_DIR;$ASDF_CXX_DIR;$PYTHON_DIR" -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="$HOME/install" ..
  - make -j2
  - echo 'BEGIN LOG OUTPUT'
  - |
    if [ "$TRAVIS_OS_NAME" = osx ]; then
      brew list
      which python
      otool -L _SimulationIO.so
    fi
  - echo 'END LOG OUTPUT'
  - if [ ${ENABLE_ASDF_CXX} = ON ]; then ./sio-example-asdf; fi
  - if [ ${ENABLE_HDF5} = ON ]; then ./sio-example; fi
  - make -j2 test CTEST_OUTPUT_ON_FAILURE=1
  - make -j2 install
  - popd

after_success:
  - |
    if [ "${ENABLE_ASDF_CXX} ${ENABLE_HDF5}" = "ON ON" ]; then
      mkdir -p "$HOME/bin" && ln -s "$(which $GCOV)" "$HOME/bin/gcov" && ls -l "$HOME/bin" && export PATH="$HOME/bin:$PATH" && hash -r
      mkdir build-coveralls && pushd build-coveralls
      cmake -DENABLE_ASDF_CXX=${ENABLE_ASDF_CXX} -DENABLE_HDF5=${ENABLE_HDF5} -DCMAKE_PREFIX_PATH="$HDF5_DIR;$YAML_CPP_DIR;$ASDF_CXX_DIR;$PYTHON_DIR" -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_BUILD_TYPE=Debug -DCOVERALLS=ON ..
      make -j2
      if [ ${ENABLE_ASDF_CXX} = ON ]; then ./sio-example-asdf; fi
      if [ ${ENABLE_HDF5} = ON ]; then ./sio-example; fi
      make -j2 coveralls CTEST_OUTPUT_ON_FAILURE=1
      popd
    fi
